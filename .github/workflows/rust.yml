name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        toolchain: [stable-x86_64-pc-windows-msvc]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2.22.0

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.toolchain }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
            ${{ runner.os }}-cargo-

      - name: Update Rust toolchain
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Build (Windows Release)
        run: cargo build --release

      - name: Package Windows Artifact
        run: |
          mkdir -p dist/windows
          cp target/release/activity_logger.exe dist/windows/
          cp assets/icon.ico dist/windows/
        shell: bash

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-windows
          path: dist/windows/

  build-linux:
    runs-on: ubuntu-latest
    needs: build-windows
    strategy:
      matrix:
        toolchain: [stable-x86_64-unknown-linux-gnu]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libx11-dev libappindicator3-dev xdotool libdbus-1-dev

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.toolchain }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
            ${{ runner.os }}-cargo-

      - name: Update Rust toolchain
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Build (Linux Release)
        run: cargo build --release

      - name: Package Linux Artifact
        run: |
          mkdir -p dist/linux
          cp target/release/activity_logger dist/linux/
          cp assets/icon.png dist/linux/
        shell: bash

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-linux
          path: dist/linux/

  release:
    runs-on: ubuntu-latest
    needs: build-linux
    permissions:
      contents: write  # Required for creating release
    steps:
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-windows
          path: dist/windows

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-linux
          path: dist/linux

      - name: Generate release tag
        id: tag
        run: echo "release_tag=UserBuild_$(date +'%Y.%m.%d_%H-%M')" >> "$GITHUB_OUTPUT"

      - name: Compress Artifacts
        run: |
          cd dist
          zip -r activity_logger_windows.zip windows
          zip -r activity_logger_linux.zip linux
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            dist/activity_logger_windows.zip
            dist/activity_logger_linux.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
